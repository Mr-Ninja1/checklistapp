import React, { useState, useEffect, useCallback } from 'react';
import { Calendar, User, Clock, CheckCircle } from 'lucide-react';

// --- Utility Functions ---

/**
 * Calculates the start date of the current week (Sunday) and returns an object
 * containing the full dates for all 7 days, the month name, and the year.
 * @param {Date} date - The date to base the calculation on.
 */
const getWeekInfo = (date = new Date()) => {
    const d = new Date(date);
    // 0 is Sunday, 6 is Saturday
    const day = d.getDay(); 
    const diff = d.getDate() - day; // Date of the Sunday
    const sunday = new Date(d.setDate(diff));

    const days = [];
    for (let i = 0; i < 7; i++) {
        const nextDay = new Date(sunday);
        nextDay.setDate(sunday.getDate() + i);
        days.push(nextDay);
    }

    // Format week start to match the paper log (e.g., 10.05)
    const weekStart = days[0].toLocaleDateString('en-US', { month: '2-digit', day: '2-digit' });

    return {
        monthName: days[0].toLocaleString('default', { month: 'long' }),
        year: days[0].getFullYear().toString(),
        weekStart: weekStart.replace('/', '.'),
        days // Array of Date objects for Sun to Sat
    };
};

/**
 * Gets the current month and year in MM/YYYY format for Issue Date auto-fill.
 */
const getFormattedIssueDate = (date = new Date()) => {
    return date.toLocaleDateString('en-US', { month: '2-digit', year: 'numeric' });
};

// --- Initial State and Configuration ---

const DAY_NAMES = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

// Represents a single empty log entry (one row on the paper log)
const createEmptyLogEntry = () => ({
    id: crypto.randomUUID(),
    fullName: '',
    jobTitle: '',
    dailyLog: DAY_NAMES.reduce((acc, day) => {
        // Time and Sign fields
        acc[day.toLowerCase()] = { time: '', sign: '' };
        return acc;
    }, {}),
    supSign: '',
});

// --- Main Application Component (The Digital Log Form) ---
const App = () => {
    // 1. Auto-Calculated Date/Week
    const initialWeekInfo = getWeekInfo();
    const [weekInfo, setWeekInfo] = useState(initialWeekInfo);

    // 2. Main Log Entries (Rows) - Pre-populate 10 empty rows to match the look of the blank form
    const [logEntries, setLogEntries] = useState(Array(10).fill(null).map(() => createEmptyLogEntry()));

    // 3. Document Metadata / Verification - Using auto-detected or placeholder values
    const [verifiedBy, setVerifiedBy] = useState('');
    const [weekStartInput, setWeekStartInput] = useState(initialWeekInfo.weekStart);
    const [monthInput, setMonthInput] = useState(initialWeekInfo.monthName);
    const [yearInput, setYearInput] = useState(initialWeekInfo.year);
    
    // Header fields requested to be editable and/or blank
    const [compilerName, setCompilerName] = useState(''); // Starts blank
    const [approverName, setApproverName] = useState(''); // Starts blank
    const [versionNo, setVersionNo] = useState('');       // Starts blank

    // New Editable Document Control Fields
    const [docNo, setDocNo] = useState(''); // Starts blank
    const [issueDate, setIssueDate] = useState(getFormattedIssueDate()); // AUTO-FILLED
    const [reviewDate, setReviewDate] = useState(''); // Starts blank

    const updateLogEntry = useCallback((id, field, value) => {
        setLogEntries(prevEntries => prevEntries.map(entry =>
            entry.id === id ? { ...entry, [field]: value } : entry
        ));
    }, []);

    const updateDailyLogEntry = useCallback((id, dayKey, field, value) => {
        setLogEntries(prevEntries => prevEntries.map(entry => {
            if (entry.id === id) {
                const newDailyLog = {
                    ...entry.dailyLog,
                    [dayKey]: {
                        ...entry.dailyLog[dayKey],
                        [field]: value
                    }
                };
                return { ...entry, dailyLog: newDailyLog };
            }
            return entry;
        }));
    }, []);

    // Simulates adding a new blank line at the bottom
    const addLogEntry = () => {
        setLogEntries([...logEntries, createEmptyLogEntry()]);
    };

    const handleSave = () => {
        // Find if any entry has any data before saving
        const dataToSave = logEntries.filter(entry =>
            entry.fullName || entry.jobTitle || entry.supSign ||
            Object.values(entry.dailyLog).some(d => d.time || d.sign)
        );

        if (dataToSave.length === 0) {
            alert('Log is empty. Please fill in some data before submitting.');
            return;
        }

        console.log('--- Submitting Digital Log ---');
        console.log('Document Info:', {
            docNo,
            issueDate,
            reviewDate,
            week: weekStartInput,
            month: monthInput,
            year: yearInput,
            verifiedBy,
            compiler: compilerName,
            approver: approverName,
            versionNo: versionNo,
        });
        console.log('Log Data:', dataToSave);
        // In a real app, this data would go to Firestore.
        alert('Log data submitted successfully! Logged data reflects only filled entries.');
    };

    /**
     * Calculates the width for an input element based on its current value length.
     * Uses 'ch' (character unit) for dynamic sizing with a minimum width.
     * @param {string} value 
     */
    const getDynamicWidthStyle = (value) => ({
        // Minimum width of 60px (approx 6 characters), then 1 character unit per character, plus 1ch for padding/caret.
        width: `max(60px, ${value.length + 1}ch)`, 
        // Important: allows the input to grow without being constrained by an inner w-full class.
    });

    // Style constants to match the paper log's thin lines and dense layout
    const cellClass = "border border-gray-400 p-0.5 text-xs h-8";
    const headerClass = "border border-gray-500 bg-gray-100 text-center font-semibold text-gray-700 text-[10px] uppercase align-middle";

    return (
        <div className="min-h-screen bg-white p-4 font-sans antialiased text-gray-800">
            {/* Added overflow-x-auto for wide table on small screens */}
            <div className="max-w-[1200px] mx-auto overflow-x-auto shadow-xl border border-gray-400 rounded-lg">
                <div className="min-w-[1000px] bg-white">
                    {/* TOP HEADER SECTION - Fixed Text and Inputs */}
                    <div className="border-b border-gray-600 p-2">
                        <div className="flex justify-between items-start text-xs mb-1">
                            {/* Logo Placeholder (Bravo Brands Limited) */}
                            <div className="flex items-center">
                                <span className="text-xl font-black text-red-600 mr-2">B</span>
                                <span className="text-xs font-semibold">BRAVO BRANDS LIMITED</span>
                            </div>
                            
                            {/* Editable Document Control Info */}
                            <div className="text-right space-y-0.5">
                                <p className="flex justify-end items-center">Doc No: 
                                    <input 
                                        type="text" 
                                        className="border-b border-gray-800 text-right mx-1 text-xs font-semibold w-24 focus:outline-none bg-transparent"
                                        value={docNo}
                                        placeholder="BBN-SHEQ..."
                                        onChange={(e) => setDocNo(e.target.value)}
                                    />
                                </p>
                                <p className="flex justify-end items-center">Issue Date: 
                                    <input 
                                        type="text" 
                                        className="border-b border-gray-800 text-right mx-1 text-xs font-semibold w-16 focus:outline-none bg-transparent"
                                        value={issueDate}
                                        onChange={(e) => setIssueDate(e.target.value)}
                                    />
                                </p>
                                <p className="flex justify-end items-center">Review Date: 
                                    <input 
                                        type="text" 
                                        className="border-b border-gray-800 text-right mx-1 text-xs font-semibold w-16 focus:outline-none bg-transparent"
                                        value={reviewDate}
                                        placeholder="N/A"
                                        onChange={(e) => setReviewDate(e.target.value)}
                                    />
                                </p>
                            </div>
                        </div>

                        <h2 className="text-sm font-bold my-1 border-y border-gray-400 py-1">
                            Subject: FOOD HANDLERS DAILY SHOWERING LOG
                        </h2>

                        {/* Editable Header Fields: Compiled By, Approved By, Version No. */}
                        <div className="flex justify-between text-xs mt-1 mb-2">
                            <p className="flex items-center">Compiled By: 
                                <input 
                                    type="text" 
                                    className="border-b border-gray-800 text-center mx-1 text-xs font-semibold w-28 focus:outline-none bg-transparent"
                                    value={compilerName}
                                    onChange={(e) => setCompilerName(e.target.value)}
                                />
                            </p>
                            <p className="flex items-center">Approved By: 
                                <input 
                                    type="text" 
                                    className="border-b border-gray-800 text-center mx-1 text-xs font-semibold w-28 focus:outline-none bg-transparent"
                                    value={approverName}
                                    onChange={(e) => setApproverName(e.target.value)}
                                />
                            </p>
                            <p className="flex items-center">Version No.: 
                                <input 
                                    type="text" 
                                    className="border-b border-gray-800 text-center mx-1 text-xs font-semibold w-10 focus:outline-none bg-transparent"
                                    value={versionNo}
                                    onChange={(e) => setVersionNo(e.target.value)}
                                />
                            </p>
                            <p>Rev no: 00</p>
                        </div>

                        {/* Week/Month/Year/Verified By Input Row - Designed to mimic paper lines */}
                        <div className="flex items-center justify-start text-sm mt-3">
                            <p className="mr-4">Week:
                                <input
                                    type="text"
                                    className="border-b border-gray-800 text-center mx-1 text-sm font-semibold w-16 focus:outline-none"
                                    value={weekStartInput}
                                    onChange={(e) => setWeekStartInput(e.target.value)}
                                />
                            </p>
                            <p className="mr-4">Month:
                                <input
                                    type="text"
                                    className="border-b border-gray-800 text-center mx-1 text-sm font-semibold w-24 focus:outline-none"
                                    value={monthInput}
                                    onChange={(e) => setMonthInput(e.target.value)}
                                />
                            </p>
                            <p className="mr-4">Year:
                                <input
                                    type="text"
                                    className="border-b border-gray-800 text-center mx-1 text-sm font-semibold w-12 focus:outline-none"
                                    value={yearInput}
                                    onChange={(e) => setYearInput(e.target.value)}
                                />
                            </p>
                            <p>Verified By:
                                <input
                                    type="text"
                                    className="border-b border-gray-800 text-center mx-1 text-sm font-semibold w-32 focus:outline-none"
                                    value={verifiedBy}
                                    onChange={(e) => setVerifiedBy(e.target.value)}
                                />
                            </p>
                        </div>
                    </div>

                    {/* MAIN LOG TABLE */}
                    <table className="w-full border-collapse">
                        <thead>
                            {/* Header Row 1: Full Name, Job Title, Day Names, Sup Sign */}
                            <tr>
                                {/* Removed fixed width for dynamic content */}
                                <th rowSpan="2" className={`${headerClass} w-auto min-w-[150px]`}>Full Name</th>
                                <th rowSpan="2" className={`${headerClass} w-auto min-w-[100px]`}>Job Title</th>

                                {DAY_NAMES.map((day, i) => (
                                    <th
                                        key={day}
                                        colSpan="2"
                                        // Keep fixed width for daily log column integrity
                                        className={`${headerClass} w-[9%]`} 
                                    >
                                        {day} <span className="font-normal">({weekInfo.days[i].getDate()})</span>
                                    </th>
                                ))}

                                {/* Keep fixed width for Sup Sign column integrity */}
                                <th rowSpan="2" className={`${headerClass} w-[9%]`}>Sup Sign</th>
                            </tr>

                            {/* Header Row 2: Time & Sign for each day */}
                            <tr>
                                {DAY_NAMES.map((day) => (
                                    <React.Fragment key={`${day}-sub`}>
                                        <th className={`${headerClass} w-[4.5%]`}>Shower Time</th>
                                        <th className={`${headerClass} w-[4.5%]`}>Sign</th>
                                    </React.Fragment>
                                ))}
                            </tr>
                        </thead>
                        <tbody>
                            {/* DATA ROWS */}
                            {logEntries.map((entry) => (
                                <tr key={entry.id} className="hover:bg-indigo-50 transition-colors">
                                    {/* Full Name (Dynamic width) */}
                                    <td className={cellClass}>
                                        <input
                                            type="text"
                                            value={entry.fullName}
                                            onChange={(e) => updateLogEntry(entry.id, 'fullName', e.target.value)}
                                            className="h-full border-none p-1 text-xs focus:ring-0 focus:outline-none bg-transparent"
                                            style={getDynamicWidthStyle(entry.fullName)}
                                        />
                                    </td>
                                    {/* Job Title (Dynamic width) */}
                                    <td className={cellClass}>
                                        <input
                                            type="text"
                                            value={entry.jobTitle}
                                            onChange={(e) => updateLogEntry(entry.id, 'jobTitle', e.target.value)}
                                            className="h-full border-none p-1 text-xs focus:ring-0 focus:outline-none bg-transparent"
                                            style={getDynamicWidthStyle(entry.jobTitle)}
                                        />
                                    </td>

                                    {/* Daily Log Entries (Sun-Sat) */}
                                    {DAY_NAMES.map((day) => {
                                        const key = day.toLowerCase();
                                        return (
                                            <React.Fragment key={`${entry.id}-${key}`}>
                                                {/* Time */}
                                                <td className={cellClass}>
                                                    <input
                                                        type="time"
                                                        value={entry.dailyLog[key].time}
                                                        onChange={(e) => updateDailyLogEntry(entry.id, key, 'time', e.target.value)}
                                                        className="h-full w-full border-none text-xs text-center focus:ring-0 focus:outline-none bg-transparent"
                                                    />
                                                </td>
                                                {/* Sign (Dynamic width) */}
                                                <td className={cellClass}>
                                                    <input
                                                        type="text"
                                                        value={entry.dailyLog[key].sign}
                                                        onChange={(e) => updateDailyLogEntry(entry.id, key, 'sign', e.target.value)}
                                                        className="h-full border-none text-xs text-center focus:ring-0 focus:outline-none bg-transparent"
                                                        style={getDynamicWidthStyle(entry.dailyLog[key].sign)}
                                                    />
                                                </td>
                                            </React.Fragment>
                                        );
                                    })}

                                    {/* Sup Sign (Dynamic width) */}
                                    <td className={cellClass}>
                                        <input
                                            type="text"
                                            value={entry.supSign}
                                            onChange={(e) => updateLogEntry(entry.id, 'supSign', e.target.value)}
                                            className="h-full border-none text-xs text-center focus:ring-0 focus:outline-none bg-transparent"
                                            style={getDynamicWidthStyle(entry.supSign)}
                                        />
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    {/* Instruction Footer and Buttons */}
                    <div className="flex justify-between items-center p-2 border-t border-gray-400">
                        <div className="text-[10px] italic text-gray-700 max-w-[70%]">
                            Instruction. All food handlers who handle food directly are required to take a shower before starting work.
                        </div>
                        <div className="flex gap-2">
                            <button
                                onClick={addLogEntry}
                                className="px-3 py-1 text-xs bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition"
                            >
                                + Add Line
                            </button>
                            <button
                                onClick={handleSave}
                                className="px-3 py-1 text-xs bg-indigo-600 text-white rounded-md shadow-md hover:bg-indigo-700 transition"
                            >
                                Submit Log
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            {/* Placeholder for modal/alert logic - replacing alert() */}
            <div id="app-message-box" className="fixed bottom-4 right-4 z-50"></div>
        </div>
    );
};

// Global function to replace alert() with a custom message box
const alert = (message) => {
    const box = document.getElementById('app-message-box');
    const msgElement = document.createElement('div');
    msgElement.className = 'bg-indigo-600 text-white p-3 rounded-lg shadow-2xl mb-2 flex items-center transform transition-all duration-300 ease-out translate-y-0 opacity-100';
    msgElement.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
        </svg>
        <span>${message}</span>
    `;
    box.appendChild(msgElement);
    setTimeout(() => {
        msgElement.classList.add('translate-y-full', 'opacity-0');
        msgElement.addEventListener('transitionend', () => msgElement.remove());
    }, 3000);
};

export default App;
