import React, { useState } from 'react';

// Time slots for the handwashing log
const TIME_SLOTS = [
    "06:00AM", "07:00AM", "08:00AM", "09:00AM", "10:00AM",
    "11:00AM", "12:00PM", "13:00PM", "14:00HRS", "15:00HRS"
];

// Initial data structure for the staff log (Updated to 14 rows)
const initialLogData = Array.from({ length: 14 }, (_, index) => ({
    id: index + 1,
    fullName: '',
    jobTitle: '',
    timeChecks: TIME_SLOTS.reduce((acc, time) => ({ ...acc, [time]: false }), {}),
    staffSign: '',
    supName: '',
    supSign: '',
}));

const App = () => {
    const [logData, setLogData] = useState(initialLogData);
    const [date, setDate] = useState('10/06/2025');
    const [location, setLocation] = useState('');
    const [verifiedBy, setVerifiedBy] = useState('');
    const [managerSign, setManagerSign] = useState('');
    const [shift, setShift] = useState('AM');

    // Handle checkbox change in the grid
    const handleCheckChange = (id, time) => {
        setLogData(prevData =>
            prevData.map(row =>
                row.id === id
                    ? { ...row, timeChecks: { ...row.timeChecks, [time]: !row.timeChecks[time] } }
                    : row
            )
        );
    };

    // Placeholder for adding a new row
    const handleAddRow = () => {
        const newId = logData.length ? logData[logData.length - 1].id + 1 : 1;
        const newRow = {
            id: newId,
            fullName: '',
            jobTitle: '',
            timeChecks: TIME_SLOTS.reduce((acc, time) => ({ ...acc, [time]: false }), {}),
            staffSign: '',
            supName: '',
            supSign: '',
        };
        setLogData([...logData, newRow]);
    };

    // Style constants
    const inputStyle = "w-full p-3 bg-white border border-gray-200 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-150";
    const labelStyle = "block text-sm font-medium text-gray-700 mb-1";
    const headerCellBase = "p-3 bg-gray-100 text-xs font-semibold text-gray-600 uppercase tracking-wider border-r border-gray-300 text-center";
    const dataCellBase = "p-3 text-sm text-gray-800 border-r border-gray-200 bg-white";

    return (
        <div className="min-h-screen bg-gray-100 font-sans antialiased text-gray-900">
            {/* Header Bar */}
            <header className="bg-white shadow-md p-4">
                <div className="max-w-7xl mx-auto flex justify-between items-center">
                    <h1 className="text-2xl font-bold text-gray-800">Daily Handwashing - PM</h1>
                    <button className="text-blue-600 hover:text-blue-800 font-semibold transition duration-150 p-2 rounded-lg">
                        Back
                    </button>
                </div>
            </header>

            {/* Main Form Card */}
            <main className="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
                <div className="bg-white p-6 sm:p-8 rounded-xl shadow-xl border border-gray-200">
                    <h2 className="text-xl font-semibold text-gray-700 mb-6">Food Handlers Daily Handwashing Tracking Log Sheet</h2>

                    {/* Top Tracking Fields (Date, Shift, Location, Verified By) */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                        {/* Left Column */}
                        <div className="space-y-6">
                            {/* Date Field */}
                            <div>
                                <label className={labelStyle}>Date:</label>
                                <div className="relative">
                                    <input
                                        type="text"
                                        value={date}
                                        onChange={(e) => setDate(e.target.value)}
                                        className={inputStyle + " pr-10"}
                                    />
                                    <span className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400">
                                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
                                    </span>
                                </div>
                            </div>

                            {/* Shift Field */}
                            <div>
                                <label className={labelStyle}>Shift:</label>
                                <select
                                    value={shift}
                                    onChange={(e) => setShift(e.target.value)}
                                    className={inputStyle}
                                >
                                    <option value="AM">AM</option>
                                    <option value="PM">PM</option>
                                    <option value="NIGHT">NIGHT</option>
                                </select>
                            </div>
                        </div>

                        {/* Right Column */}
                        <div className="space-y-6">
                            {/* Location Field */}
                            <div>
                                <label className={labelStyle}>Location:</label>
                                <textarea
                                    rows="2"
                                    placeholder="Enter location or address"
                                    value={location}
                                    onChange={(e) => setLocation(e.target.value)}
                                    className={inputStyle + " resize-none"}
                                ></textarea>
                            </div>

                            {/* Verified By Field */}
                            <div>
                                <label className={labelStyle}>Verified By:</label>
                                <textarea
                                    rows="2"
                                    value={verifiedBy}
                                    onChange={(e) => setVerifiedBy(e.target.value)}
                                    className={inputStyle + " resize-none"}
                                ></textarea>
                            </div>
                        </div>
                    </div>

                    {/* Complex Manager Sign */}
                    <div className="mb-8">
                        <label className={labelStyle}>Complex Manager Sign:</label>
                        <textarea
                            rows="2"
                            placeholder="Manager name / signature"
                            value={managerSign}
                            onChange={(e) => setManagerSign(e.target.value)}
                            className={inputStyle + " resize-none"}
                        ></textarea>
                    </div>

                    {/* Handwashing Tracking Grid */}
                    <h3 className="text-lg font-semibold text-gray-700 mb-4">Tracking Log</h3>
                    
                    {/* The Grid Container - Responsive and Scrollable */}
                    <div
                        className="overflow-x-auto rounded-lg border border-gray-300 shadow-inner"
                        style={{
                            WebkitOverflowScrolling: 'touch' // enable momentum scrolling on iOS
                        }}
                    >
                        <div className="inline-block min-w-full">
                            {/* Grid Header */}
                            <div className="bg-gray-50 border-b border-gray-300 text-center flex sticky top-0 z-30">
                                <div
                                    className={`${headerCellBase} w-12 flex-shrink-0`}
                                    style={{ position: 'sticky', left: 0, zIndex: 40 }}
                                >
                                    S/N
                                </div>
                                <div
                                    className={`${headerCellBase} min-w-[150px] flex-shrink-0`}
                                    style={{ position: 'sticky', left: '48px', zIndex: 40 }}
                                >
                                    Full Name
                                </div>
                                <div
                                    className={`${headerCellBase} min-w-[150px] flex-shrink-0`}
                                    style={{ position: 'sticky', left: '198px', zIndex: 40 }}
                                >
                                    Job Title
                                </div>
                                
                                {/* Time Slot Headers (Scrollable part) */}
                                <div className="flex flex-grow items-center">
                                    {TIME_SLOTS.map(time => (
                                        <div key={time} className={`${headerCellBase} w-20 flex-shrink-0`}>
                                            {time}
                                        </div>
                                    ))}
                                </div>

                                <div className={`${headerCellBase} min-w-[120px] flex-shrink-0`}>Staff Sign</div>
                                <div className={`${headerCellBase} min-w-[120px] flex-shrink-0`}>Sup Name</div>
                                <div className={`${headerCellBase} min-w-[120px] border-r-0 flex-shrink-0`}>Sup Sign</div>
                            </div>

                            {/* Grid Body Rows */}
                            {logData.map((row, index) => (
                                <div key={row.id} className={`flex border-b border-gray-200 ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'} hover:bg-blue-50 transition duration-150`}>
                                    {/* Fixed/Identifying Columns */}
                                    <div
                                        className={`${dataCellBase} w-12 flex-shrink-0 font-medium text-center`}
                                        style={{ position: 'sticky', left: 0, zIndex: 30, background: index % 2 === 0 ? '#ffffff' : '#f9fafb' }}
                                    >
                                        {row.id}
                                    </div>
                                    <div
                                        className={`${dataCellBase} min-w-[150px] flex-shrink-0`}
                                        style={{ position: 'sticky', left: '48px', zIndex: 30, background: index % 2 === 0 ? '#ffffff' : '#f9fafb' }}
                                    >
                                        <input
                                            type="text"
                                            className="w-full bg-transparent focus:outline-none"
                                            placeholder="Enter name"
                                            value={row.fullName}
                                            onChange={(e) => setLogData(prev => prev.map(r => r.id === row.id ? { ...r, fullName: e.target.value } : r))}
                                        />
                                    </div>
                                    <div
                                        className={`${dataCellBase} min-w-[150px] flex-shrink-0`}
                                        style={{ position: 'sticky', left: '198px', zIndex: 30, background: index % 2 === 0 ? '#ffffff' : '#f9fafb' }}
                                    >
                                        <input
                                            type="text"
                                            className="w-full bg-transparent focus:outline-none"
                                            placeholder="Enter title"
                                            value={row.jobTitle}
                                            onChange={(e) => setLogData(prev => prev.map(r => r.id === row.id ? { ...r, jobTitle: e.target.value } : r))}
                                        />
                                    </div>

                                    {/* Checkbox Columns (Scrollable part) */}
                                    <div className="flex flex-grow items-center">
                                        {TIME_SLOTS.map(time => (
                                            <div key={time} className={`${dataCellBase} w-20 flex-shrink-0 flex items-center justify-center`}>
                                                <input
                                                    type="checkbox"
                                                    checked={row.timeChecks[time]}
                                                    onChange={() => handleCheckChange(row.id, time)}
                                                    className="h-5 w-5 text-blue-600 border-gray-300 rounded focus:ring-blue-500 cursor-pointer"
                                                />
                                            </div>
                                        ))}
                                    </div>
                                    
                                    {/* Signature/Name Columns */}
                                    <div className={`${dataCellBase} min-w-[120px] flex-shrink-0`}>
                                        <input
                                            onChange={(e) => setLogData(prev => prev.map(r => r.id === row.id ? { ...r, staffSign: e.target.value } : r))}
                                        />
                                    </div>
                                    <div className={`${dataCellBase} min-w-[120px] flex-shrink-0`}>
                                        <input
                                            type="text"
                                            className="w-full bg-transparent focus:outline-none"
                                            placeholder="Supervisor Name"
                                            value={row.supName}
                                            onChange={(e) => setLogData(prev => prev.map(r => r.id === row.id ? { ...r, supName: e.target.value } : r))}
                                        />
                                    </div>
                                    <div className={`${dataCellBase} min-w-[120px] border-r-0 flex-shrink-0`}>
                                        <input
                                            type="text"
                                            className="w-full bg-transparent focus:outline-none"
                                            placeholder="Signature"
                                            value={row.supSign}
                                            onChange={(e) => setLogData(prev => prev.map(r => r.id === row.id ? { ...r, supSign: e.target.value } : r))}
                                        />
                                    </div>
                                </div>
                            ))}
                        </div>
                     </div>

                     {/* Action Buttons and Instructions (New Section) */}
                     <div className="mt-8 pt-6 border-t border-gray-200">
                         {/* Buttons Row */}
                         <div className="flex gap-4 mb-4">
                             <button
                                 className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-150 shadow-md"
                                 onClick={handleAddRow}
                             >
                                 Add Row
                             </button>
                             <button
                                 className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg transition duration-150 shadow-md"
                                 onClick={() => console.log('Save clicked')}
                             >
                                 Save
                             </button>
                             <button
                                 className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition duration-150 shadow-md"
                                 onClick={() => console.log('Submit clicked')}
                             >
                                 Submit
                             </button>
                         </div>

                         {/* Instruction Text */}
                         <p className="text-sm text-gray-600 border-l-4 border-yellow-500 pl-3 py-1 bg-yellow-50 rounded-r-lg">
                             Instruction: All food handlers are required to wash and sanitize their hands every after $60$mins.
                         </p>
                     </div>
                 </div>
             </main>
         </div>
    );
};

export default App;
